/**
 * Login API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.kinny.login;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.kinny.login.models.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ApiError".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApiError>>(){}.getType();
    }
    
    if ("BaseResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<BaseResponse>>(){}.getType();
    }
    
    if ("DeviceDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeviceDto>>(){}.getType();
    }
    
    if ("DeviceRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeviceRequest>>(){}.getType();
    }
    
    if ("ExternalLoginDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExternalLoginDto>>(){}.getType();
    }
    
    if ("ExternalLoginRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExternalLoginRequest>>(){}.getType();
    }
    
    if ("ExternalLoginResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExternalLoginResponse>>(){}.getType();
    }
    
    if ("ProfileInformationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProfileInformationResponse>>(){}.getType();
    }
    
    if ("RemoveDeviceRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<RemoveDeviceRequest>>(){}.getType();
    }
    
    if ("RemoveExternalLoginRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<RemoveExternalLoginRequest>>(){}.getType();
    }
    
    if ("SendSmsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendSmsRequest>>(){}.getType();
    }
    
    if ("TokenResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<TokenResponse>>(){}.getType();
    }
    
    if ("UserDto".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserDto>>(){}.getType();
    }
    
    if ("UserLoginRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserLoginRequest>>(){}.getType();
    }
    
    if ("UserRegisterRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserRegisterRequest>>(){}.getType();
    }
    
    if ("VerifySmsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<VerifySmsRequest>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ApiError".equalsIgnoreCase(className)) {
      return new TypeToken<ApiError>(){}.getType();
    }
    
    if ("BaseResponse".equalsIgnoreCase(className)) {
      return new TypeToken<BaseResponse>(){}.getType();
    }
    
    if ("DeviceDto".equalsIgnoreCase(className)) {
      return new TypeToken<DeviceDto>(){}.getType();
    }
    
    if ("DeviceRequest".equalsIgnoreCase(className)) {
      return new TypeToken<DeviceRequest>(){}.getType();
    }
    
    if ("ExternalLoginDto".equalsIgnoreCase(className)) {
      return new TypeToken<ExternalLoginDto>(){}.getType();
    }
    
    if ("ExternalLoginRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ExternalLoginRequest>(){}.getType();
    }
    
    if ("ExternalLoginResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ExternalLoginResponse>(){}.getType();
    }
    
    if ("ProfileInformationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ProfileInformationResponse>(){}.getType();
    }
    
    if ("RemoveDeviceRequest".equalsIgnoreCase(className)) {
      return new TypeToken<RemoveDeviceRequest>(){}.getType();
    }
    
    if ("RemoveExternalLoginRequest".equalsIgnoreCase(className)) {
      return new TypeToken<RemoveExternalLoginRequest>(){}.getType();
    }
    
    if ("SendSmsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<SendSmsRequest>(){}.getType();
    }
    
    if ("TokenResponse".equalsIgnoreCase(className)) {
      return new TypeToken<TokenResponse>(){}.getType();
    }
    
    if ("UserDto".equalsIgnoreCase(className)) {
      return new TypeToken<UserDto>(){}.getType();
    }
    
    if ("UserLoginRequest".equalsIgnoreCase(className)) {
      return new TypeToken<UserLoginRequest>(){}.getType();
    }
    
    if ("UserRegisterRequest".equalsIgnoreCase(className)) {
      return new TypeToken<UserRegisterRequest>(){}.getType();
    }
    
    if ("VerifySmsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<VerifySmsRequest>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
